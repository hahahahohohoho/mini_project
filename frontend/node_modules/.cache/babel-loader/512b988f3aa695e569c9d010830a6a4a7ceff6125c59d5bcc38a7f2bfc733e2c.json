{"ast":null,"code":"var _jsxFileName = \"C:\\\\LEECHANGSU_MAIN\\\\mini_project\\\\frontend\\\\src\\\\Busan\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const mapElement = useRef(null);\n  const [AddressX, setAddressX] = useState(0);\n  const [AddressY, setAddressY] = useState(0);\n  const {\n    naver\n  } = window;\n  const [newMap, setNewMap] = useState(null);\n  let map;\n  const createMarkerList = [];\n  useEffect(() => {\n    if (searchKeyword) {\n      naver.maps.Service.geocode({\n        query: searchKeyword\n      }, function (status, res) {\n        if (res.v2.addresses.length === 0) {\n          // 요청실패 (searchKeyword에 대한 응답이 없을 경우) 에러 핸들링\n        } else {\n          // 요청 성공에 대한 핸들링\n          // 검색된 주소에 해당하는 위도, 경도를 숫자로 변환후 상태 저장\n          const resAddress = res.v2.addresses[0];\n          const x = parseFloat(resAddress.x);\n          const y = parseFloat(resAddress.y);\n          setAddressX(x);\n          setAddressY(y);\n        }\n      });\n    }\n  }, [searchKeyword]);\n  useEffect(() => {\n    if (!mapElement.current || !naver) return;\n\n    // Map 클래스는 지도를 표현하는 클래스\n    // new 연산자를 이용하여 새 인스턴스를 생성\n    // 변환해놓은 좌표값을 이용하여 지도 중심 인스턴스 생성\n    const center = new naver.maps.LatLng(AddressY, AddressX);\n    //지도 옵션 설정\n    const mapOptions = {\n      //center 옵션에 생성한 지도 중심 인스턴스 넣기\n      center: center,\n      zoom: 12,\n      minZoom: 11,\n      maxZoom: 19,\n      zoomControl: true,\n      zoomControlOptions: {\n        style: naver.maps.ZoomControlStyle.SMALL,\n        position: naver.maps.Position.TOP_RIGHT\n      },\n      mapDataControl: false,\n      scaleControl: false\n    };\n    //설정해놓은 옵션을 바탕으로 지도 생성\n    map = new naver.maps.Map(mapElement.current, mapOptions);\n    setNewMap(map);\n    //마커 생성 함수 호출\n    addMarkers();\n    //검색 결과 거리순으로 재정렬하는 함수 호출\n    resetListHandler();\n  }, [AddressX, AddressY, totalDomData, viewportWidth]);\n\n  //반복문을 통해 데이터 배열 순회하면서 마커 생성 진행!\n  const addMarkers = () => {\n    for (let i = 0; i < totalDataArray.length; i++) {\n      let markerObj = totalDataArray[i];\n      const {\n        dom_id,\n        title,\n        lat,\n        lng\n      } = markerObj;\n      addMarker(dom_id, title, lat, lng);\n    }\n  };\n  //마커 생성 하고 createMarkerList에 추가!!\n  const addMarker = (id, name, lat, lng) => {\n    try {\n      let newMarker = new naver.maps.Marker({\n        position: new naver.maps.LatLng(lng, lat),\n        map,\n        title: name,\n        clickable: true\n      });\n      newMarker.setTitle(name);\n      //마커리스트에 추가\n      createMarkerList.push(newMarker);\n      //마커에 이벤트 핸들러 등록\n      naver.maps.Event.addListener(newMarker, 'click', () => markerClickHandler(id));\n    } catch (e) {}\n  };\n  const updateMarkers = (map, markers) => {\n    if (!map) return;\n    // 현재 지도의 화면 영역을 mapBounds 변수에 저장\n    let mapBounds = map.getBounds();\n    let marker, position;\n\n    // 마커 객체 배열을 순회하며 각 마커의 위치를 position 변수에 저장   \n    for (var i = 0; i < markers.length; i++) {\n      marker = markers[i];\n      position = marker.getPosition();\n\n      // mapBounds와 비교하며 마커가 현재 화면에 보이는 영역에 있는지 확인\n      if (mapBounds.hasPoint(position)) {\n        // 보이는 영역에 있다면 마커 표시\n        showMarker(map, marker);\n      } else {\n        // 숨겨진 영역에 있다면 마커 숨김 \n        hideMarker(marker);\n      }\n    }\n  };\n\n  //마커를 클릭했을 때 실행할 이벤트 핸들러\n  const markerClickHandler = id => {\n    navigate(`/ground/${id}`);\n  };\n  //이벤트 핸들러 등록\n  useEffect(() => {\n    if (newMap) {\n      const MoveEventListner = naver.maps.Event.addListener(newMap, 'idle', idleHandler);\n      return () => {\n        naver.maps.Event.removeListener(MoveEventListner);\n      };\n    }\n  }, [newMap]);\n  const idleHandler = () => {\n    updateMarkers(newMap, createMarkerList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StyledMap, {\n      id: \"map\",\n      ref: mapElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"X3xripepG7fMGH4Rt7BlgTQc8aY=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","Main","_s","mapElement","AddressX","setAddressX","AddressY","setAddressY","naver","window","newMap","setNewMap","map","createMarkerList","searchKeyword","maps","Service","geocode","query","status","res","v2","addresses","length","resAddress","x","parseFloat","y","current","center","LatLng","mapOptions","zoom","minZoom","maxZoom","zoomControl","zoomControlOptions","style","ZoomControlStyle","SMALL","position","Position","TOP_RIGHT","mapDataControl","scaleControl","Map","addMarkers","resetListHandler","totalDomData","viewportWidth","i","totalDataArray","markerObj","dom_id","title","lat","lng","addMarker","id","name","newMarker","Marker","clickable","setTitle","push","Event","addListener","markerClickHandler","e","updateMarkers","markers","mapBounds","getBounds","marker","getPosition","hasPoint","showMarker","hideMarker","navigate","MoveEventListner","idleHandler","removeListener","children","StyledMap","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/LEECHANGSU_MAIN/mini_project/frontend/src/Busan/Main.js"],"sourcesContent":["import React from 'react'\r\nimport { useRef,useState, useEffect } from 'react';\r\nexport default function Main() {\r\n    const mapElement = useRef(null);\r\n    const [AddressX, setAddressX] = useState(0);\r\n    const [AddressY, setAddressY] = useState(0);\r\n    const { naver } = window;\r\n    const [newMap, setNewMap] = useState(null);\r\n    let map;\r\n    const createMarkerList = [];\r\n    \r\n    useEffect(() => {\r\n        if (searchKeyword) {\r\n          naver.maps.Service.geocode(\r\n            { query: searchKeyword },\r\n            function (status, res) {\r\n              if (res.v2.addresses.length === 0) {\r\n                // 요청실패 (searchKeyword에 대한 응답이 없을 경우) 에러 핸들링\r\n              } else {\r\n                // 요청 성공에 대한 핸들링\r\n                // 검색된 주소에 해당하는 위도, 경도를 숫자로 변환후 상태 저장\r\n                const resAddress = res.v2.addresses[0];\r\n                const x = parseFloat(resAddress.x);\r\n                const y = parseFloat(resAddress.y);\r\n                setAddressX(x);\r\n                setAddressY(y);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }, [searchKeyword]);\r\n      \r\n      useEffect(() => {\r\n        if (!mapElement.current || !naver) return;\r\n    \r\n        // Map 클래스는 지도를 표현하는 클래스\r\n        // new 연산자를 이용하여 새 인스턴스를 생성\r\n        // 변환해놓은 좌표값을 이용하여 지도 중심 인스턴스 생성\r\n        const center = new naver.maps.LatLng(AddressY, AddressX);\r\n        //지도 옵션 설정\r\n        const mapOptions = {\r\n          //center 옵션에 생성한 지도 중심 인스턴스 넣기\r\n          center: center,\r\n          zoom: 12,\r\n          minZoom: 11,\r\n          maxZoom: 19,\r\n          zoomControl: true,\r\n          zoomControlOptions: {\r\n            style: naver.maps.ZoomControlStyle.SMALL,\r\n            position: naver.maps.Position.TOP_RIGHT,\r\n          },\r\n          mapDataControl: false,\r\n          scaleControl: false,\r\n        };\r\n        //설정해놓은 옵션을 바탕으로 지도 생성\r\n        map = new naver.maps.Map(mapElement.current, mapOptions);\r\n        setNewMap(map);\r\n        //마커 생성 함수 호출\r\n        addMarkers();\r\n        //검색 결과 거리순으로 재정렬하는 함수 호출\r\n        resetListHandler();\r\n      }, [AddressX, AddressY, totalDomData, viewportWidth]);\r\n\r\n      //반복문을 통해 데이터 배열 순회하면서 마커 생성 진행!\r\n  const addMarkers = () => {\r\n    for (let i = 0; i < totalDataArray.length; i++) {\r\n      let markerObj = totalDataArray[i];\r\n      const { dom_id, title, lat, lng } = markerObj;\r\n      addMarker(dom_id, title, lat, lng);\r\n    }\r\n  };\r\n  //마커 생성 하고 createMarkerList에 추가!!\r\n  const addMarker = (id, name, lat, lng) => {\r\n    try {\r\n      let newMarker = new naver.maps.Marker({\r\n        position: new naver.maps.LatLng(lng, lat),\r\n        map,\r\n        title: name,\r\n        clickable: true,\r\n      });\r\n      newMarker.setTitle(name);\r\n      //마커리스트에 추가\r\n      createMarkerList.push(newMarker);\r\n      //마커에 이벤트 핸들러 등록\r\n      naver.maps.Event.addListener(newMarker, 'click', () =>\r\n        markerClickHandler(id)\r\n      );\r\n    } catch (e) {}\r\n  };\r\n\r\n  const updateMarkers = (map,markers) => {\r\n    if (!map) return;\r\n    // 현재 지도의 화면 영역을 mapBounds 변수에 저장\r\n    let mapBounds = map.getBounds();\r\n    let marker, position;\r\n    \r\n    // 마커 객체 배열을 순회하며 각 마커의 위치를 position 변수에 저장   \r\n    for (var i = 0; i < markers.length; i++) {\r\n      marker = markers[i];\r\n      position = marker.getPosition();\r\n      \r\n      // mapBounds와 비교하며 마커가 현재 화면에 보이는 영역에 있는지 확인\r\n      if (mapBounds.hasPoint(position)) {\r\n        // 보이는 영역에 있다면 마커 표시\r\n        showMarker(map, marker);\r\n      } else {\r\n        // 숨겨진 영역에 있다면 마커 숨김 \r\n        hideMarker(marker);\r\n      }\r\n    }\r\n  };\r\n\r\n  //마커를 클릭했을 때 실행할 이벤트 핸들러\r\n  const markerClickHandler = (id) => {\r\n    navigate(`/ground/${id}`);\r\n  };\r\n  //이벤트 핸들러 등록\r\n  useEffect(() => {\r\n    if (newMap) {\r\n      const MoveEventListner = naver.maps.Event.addListener(\r\n        newMap,\r\n        'idle',\r\n        idleHandler\r\n      );\r\n      return () => {\r\n        naver.maps.Event.removeListener(MoveEventListner);\r\n      };\r\n    }\r\n  }, [newMap]);\r\n\r\n  const idleHandler = () => {\r\n    updateMarkers(newMap, createMarkerList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StyledMap id=\"map\" ref={mapElement}></StyledMap> \r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}