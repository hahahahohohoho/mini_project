{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nconst MarkerComponent = ({\n  map,\n  markerData\n}) => {\n  _s();\n  const {\n    naver\n  } = window; // naver 지도 객체를 window에서 가져옵니다.\n  const [infoWindows, setInfoWindows] = useState([]);\n  const [markers, setMarkers] = useState([]); // 현재 표시된 마커들을 관리하는 상태\n\n  useEffect(() => {\n    if (map) {\n      // 지도 객체가 준비되었는지 확인\n      // 이전 마커와 InfoWindow 제거\n      markers.forEach(marker => marker.setMap(null)); // 지도에서 마커 제거\n      infoWindows.forEach(infoWindow => infoWindow.close()); // 모든 InfoWindow 닫기\n\n      const newMarkers = [];\n      const newInfoWindows = [];\n      markerData.forEach(location => {\n        let lng, lat;\n\n        // 좌표 정보를 파싱\n        if (location.point) {\n          // 기존 POINT 형식의 데이터를 처리\n          const pointMatch = location.point.match(/POINT \\(([^ ]+) ([^ ]+)\\)/);\n          if (pointMatch) {\n            lng = parseFloat(pointMatch[1]); // 경도 추출\n            lat = parseFloat(pointMatch[2]); // 위도 추출\n          }\n        } else if (location.WKT) {\n          // 식당 데이터에서 WKT 형식의 데이터를 처리\n          const wktMatch = location.WKT.match(/POINT \\(([^ ]+) ([^ ]+)\\)/);\n          if (wktMatch) {\n            lng = parseFloat(wktMatch[1]); // 경도 추출\n            lat = parseFloat(wktMatch[2]); // 위도 추출\n          }\n        }\n        if (lng !== undefined && lat !== undefined) {\n          const title = location.title || location.name; // 제목 설정 (name 필드는 식당 데이터에서 사용 가능)\n          const img2 = location.img2 || location.main_img_t; // 이미지 설정 (imageUrl 필드는 식당 데이터에서 사용 가능)\n\n          // 마커 생성\n          const marker = new naver.maps.Marker({\n            position: new naver.maps.LatLng(lat, lng),\n            // 마커 위치 설정\n            map: map,\n            // 마커가 표시될 지도 객체\n            title: title // 마커의 타이틀 설정\n          });\n          // 정보창 생성\n          const infoWindow = new naver.maps.InfoWindow({\n            content: `\n              <div style=\"width:150px;text-align:center;padding:5px;\">\n                <h4>${title}</h4>\n                <img src=${img2} alt=\"${title}\" style=\"width:100%;\" onError=\"this.onerror=null; this.src='';\"/>\n              </div>\n            `\n          });\n          newInfoWindows.push(infoWindow);\n          newMarkers.push(marker);\n\n          // 마커 클릭 이벤트 설정\n          naver.maps.Event.addListener(marker, 'click', () => {\n            if (infoWindow.getMap()) {\n              infoWindow.close();\n            } else {\n              infoWindow.open(map, marker);\n            }\n          });\n        }\n      });\n\n      // 새로 생성된 마커와 InfoWindow를 상태로 저장\n      setMarkers(newMarkers);\n      setInfoWindows(newInfoWindows);\n\n      // 컴포넌트 언마운트 시 또는 markerData가 변경될 때 마커와 InfoWindow를 제거하는 정리 작업\n      return () => {\n        newMarkers.forEach(marker => marker.setMap(null)); // 모든 마커를 지도에서 제거\n        newInfoWindows.forEach(infoWindow => infoWindow.close()); // 모든 InfoWindow 닫기\n      };\n    }\n  }, [map, markerData]); // map과 markerData가 변경될 때만 이 useEffect 훅이 실행됨\n\n  return null; // 이 컴포넌트는 UI를 렌더링하지 않으므로 null 반환\n};\n_s(MarkerComponent, \"HJIwTZRyLc7IcP5C+b2hfaRJvxs=\");\n_c = MarkerComponent;\nexport default MarkerComponent;\nvar _c;\n$RefreshReg$(_c, \"MarkerComponent\");","map":{"version":3,"names":["React","useEffect","useState","MarkerComponent","map","markerData","_s","naver","window","infoWindows","setInfoWindows","markers","setMarkers","forEach","marker","setMap","infoWindow","close","newMarkers","newInfoWindows","location","lng","lat","point","pointMatch","match","parseFloat","WKT","wktMatch","undefined","title","name","img2","main_img_t","maps","Marker","position","LatLng","InfoWindow","content","push","Event","addListener","getMap","open","_c","$RefreshReg$"],"sources":["C:/LEECHANGSU_MAIN/mini_project/frontend/src/components/map/MarkerComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst MarkerComponent = ({ map, markerData }) => {\r\n  const { naver } = window; // naver 지도 객체를 window에서 가져옵니다.\r\n  const [infoWindows, setInfoWindows] = useState([]);\r\n  const [markers, setMarkers] = useState([]); // 현재 표시된 마커들을 관리하는 상태\r\n\r\n  useEffect(() => {\r\n    if (map) { // 지도 객체가 준비되었는지 확인\r\n      // 이전 마커와 InfoWindow 제거\r\n      markers.forEach(marker => marker.setMap(null)); // 지도에서 마커 제거\r\n      infoWindows.forEach(infoWindow => infoWindow.close()); // 모든 InfoWindow 닫기\r\n\r\n      const newMarkers = [];\r\n      const newInfoWindows = [];\r\n\r\n      markerData.forEach((location) => {\r\n        let lng, lat;\r\n\r\n        // 좌표 정보를 파싱\r\n        if (location.point) { // 기존 POINT 형식의 데이터를 처리\r\n          const pointMatch = location.point.match(/POINT \\(([^ ]+) ([^ ]+)\\)/);\r\n          if (pointMatch) {\r\n            lng = parseFloat(pointMatch[1]); // 경도 추출\r\n            lat = parseFloat(pointMatch[2]); // 위도 추출\r\n          }\r\n        } else if (location.WKT) { // 식당 데이터에서 WKT 형식의 데이터를 처리\r\n          const wktMatch = location.WKT.match(/POINT \\(([^ ]+) ([^ ]+)\\)/);\r\n          if (wktMatch) {\r\n            lng = parseFloat(wktMatch[1]); // 경도 추출\r\n            lat = parseFloat(wktMatch[2]); // 위도 추출\r\n          }\r\n        }\r\n\r\n        if (lng !== undefined && lat !== undefined) {\r\n          const title = location.title || location.name; // 제목 설정 (name 필드는 식당 데이터에서 사용 가능)\r\n          const img2 = location.img2 || location.main_img_t; // 이미지 설정 (imageUrl 필드는 식당 데이터에서 사용 가능)\r\n\r\n          // 마커 생성\r\n          const marker = new naver.maps.Marker({\r\n            position: new naver.maps.LatLng(lat, lng), // 마커 위치 설정\r\n            map: map, // 마커가 표시될 지도 객체\r\n            title: title, // 마커의 타이틀 설정\r\n          });\r\n          // 정보창 생성\r\n          const infoWindow = new naver.maps.InfoWindow({\r\n            content: `\r\n              <div style=\"width:150px;text-align:center;padding:5px;\">\r\n                <h4>${title}</h4>\r\n                <img src=${img2} alt=\"${title}\" style=\"width:100%;\" onError=\"this.onerror=null; this.src='';\"/>\r\n              </div>\r\n            `,\r\n          });\r\n\r\n          newInfoWindows.push(infoWindow);\r\n          newMarkers.push(marker);\r\n\r\n          // 마커 클릭 이벤트 설정\r\n          naver.maps.Event.addListener(marker, 'click', () => {\r\n            if (infoWindow.getMap()) {\r\n              infoWindow.close();\r\n            } else {\r\n              infoWindow.open(map, marker);\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      // 새로 생성된 마커와 InfoWindow를 상태로 저장\r\n      setMarkers(newMarkers);\r\n      setInfoWindows(newInfoWindows);\r\n\r\n      // 컴포넌트 언마운트 시 또는 markerData가 변경될 때 마커와 InfoWindow를 제거하는 정리 작업\r\n      return () => {\r\n        newMarkers.forEach(marker => marker.setMap(null)); // 모든 마커를 지도에서 제거\r\n        newInfoWindows.forEach(infoWindow => infoWindow.close()); // 모든 InfoWindow 닫기\r\n      };\r\n    }\r\n  }, [map, markerData]); // map과 markerData가 변경될 때만 이 useEffect 훅이 실행됨\r\n\r\n  return null; // 이 컴포넌트는 UI를 렌더링하지 않으므로 null 반환\r\n};\r\n\r\nexport default MarkerComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}