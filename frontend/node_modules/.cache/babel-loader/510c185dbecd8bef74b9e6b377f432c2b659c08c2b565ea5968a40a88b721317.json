{"ast":null,"code":"var _jsxFileName = \"C:\\\\LEECHANGSU_MAIN\\\\mini_project\\\\frontend\\\\src\\\\components\\\\board\\\\BoardList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from '../../axios';\nimport BoardTable from './utils/BoardTable';\nimport Pagination from './utils/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BoardList() {\n  _s();\n  const [dataBoard, setDataBoard] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10; // 페이지당 항목 수\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loadBoard = async () => {\n      try {\n        const response = await axios.get('/board');\n        const data = response.data;\n        setDataBoard(data); // 전체 데이터를 한 번만 로드\n      } catch (error) {\n        console.error('Error fetching board data:', error);\n      }\n    };\n    loadBoard();\n  }, []); // 빈 배열로 설정하여 이 로직은 컴포넌트 마운트 시 한 번만 실행\n\n  // 페이지 전환 시 데이터를 슬라이스\n  const currentBoardItems = dataBoard.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n  const handleRowClick = async boardItem => {\n    try {\n      const response = await axios.get(`/board/${boardItem.id}`);\n      const boardDetail = response.data;\n      navigate(`/detail/${boardItem.username}/${boardItem.title}`, {\n        state: {\n          boardItem: boardDetail\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching board details:', error);\n      alert('게시물 세부 정보를 가져오는 데 실패했습니다.');\n    }\n  };\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber); // 페이지 번호만 업데이트\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 min-h-screen flex flex-col justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4 text-center\",\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-end mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/create'),\n        className: \"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400\",\n        children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto flex-grow\",\n      style: {\n        minHeight: 'calc(10 * 4rem + 2rem)'\n      },\n      children: /*#__PURE__*/_jsxDEV(BoardTable, {\n        boardItems: currentBoardItems,\n        handleRowClick: handleRowClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      totalItems: dataBoard.length,\n      itemsPerPage: itemsPerPage,\n      currentPage: currentPage,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(BoardList, \"R6nYxjfTv7whwKHD8jLOmlXW31s=\", false, function () {\n  return [useNavigate];\n});\n_c = BoardList;\nvar _c;\n$RefreshReg$(_c, \"BoardList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","BoardTable","Pagination","jsxDEV","_jsxDEV","BoardList","_s","dataBoard","setDataBoard","currentPage","setCurrentPage","itemsPerPage","navigate","loadBoard","response","get","data","error","console","currentBoardItems","slice","handleRowClick","boardItem","id","boardDetail","username","title","state","alert","handlePageChange","pageNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","minHeight","boardItems","totalItems","length","onPageChange","_c","$RefreshReg$"],"sources":["C:/LEECHANGSU_MAIN/mini_project/frontend/src/components/board/BoardList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from '../../axios';\r\nimport BoardTable from './utils/BoardTable';\r\nimport Pagination from './utils/Pagination';\r\n\r\nexport default function BoardList() {\r\n    const [dataBoard, setDataBoard] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10; // 페이지당 항목 수\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const loadBoard = async () => {\r\n            try {\r\n                const response = await axios.get('/board');\r\n                const data = response.data;\r\n                setDataBoard(data); // 전체 데이터를 한 번만 로드\r\n            } catch (error) {\r\n                console.error('Error fetching board data:', error);\r\n            }\r\n        };\r\n        loadBoard();\r\n    }, []); // 빈 배열로 설정하여 이 로직은 컴포넌트 마운트 시 한 번만 실행\r\n\r\n    // 페이지 전환 시 데이터를 슬라이스\r\n    const currentBoardItems = dataBoard.slice(\r\n        (currentPage - 1) * itemsPerPage,\r\n        currentPage * itemsPerPage\r\n    );\r\n\r\n    const handleRowClick = async (boardItem) => {\r\n        try {\r\n            const response = await axios.get(`/board/${boardItem.id}`);\r\n            const boardDetail = response.data;\r\n            navigate(`/detail/${boardItem.username}/${boardItem.title}`, { state: { boardItem: boardDetail } });\r\n        } catch (error) {\r\n            console.error('Error fetching board details:', error);\r\n            alert('게시물 세부 정보를 가져오는 데 실패했습니다.');\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (pageNumber) => {\r\n        setCurrentPage(pageNumber); // 페이지 번호만 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4 min-h-screen flex flex-col justify-between\">\r\n            <h1 className=\"text-2xl font-bold mb-4 text-center\">Board</h1>\r\n            <div className=\"flex items-end mb-4\">\r\n                    <button \r\n                        onClick={() => navigate('/create')} \r\n                        className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400\"\r\n                    >\r\n                        게시글 작성\r\n                    </button>\r\n            </div>\r\n            <div className=\"overflow-x-auto flex-grow\" style={{ minHeight: 'calc(10 * 4rem + 2rem)' }}>\r\n                {/* 10개 항목의 높이와 패딩을 고려한 최소 높이 설정 */}\r\n                <BoardTable boardItems={currentBoardItems} handleRowClick={handleRowClick} />\r\n            </div>\r\n            <Pagination\r\n                totalItems={dataBoard.length}\r\n                itemsPerPage={itemsPerPage}\r\n                currentPage={currentPage}\r\n                onPageChange={handlePageChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMc,YAAY,GAAG,EAAE,CAAC,CAAC;EACzB,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,QAAQ,CAAC;QAC1C,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI;QAC1BR,YAAY,CAACQ,IAAI,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;IACDJ,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMM,iBAAiB,GAAGZ,SAAS,CAACa,KAAK,CACrC,CAACX,WAAW,GAAG,CAAC,IAAIE,YAAY,EAChCF,WAAW,GAAGE,YAClB,CAAC;EAED,MAAMU,cAAc,GAAG,MAAOC,SAAS,IAAK;IACxC,IAAI;MACA,MAAMR,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,UAAUO,SAAS,CAACC,EAAE,EAAE,CAAC;MAC1D,MAAMC,WAAW,GAAGV,QAAQ,CAACE,IAAI;MACjCJ,QAAQ,CAAC,WAAWU,SAAS,CAACG,QAAQ,IAAIH,SAAS,CAACI,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;UAAEL,SAAS,EAAEE;QAAY;MAAE,CAAC,CAAC;IACvG,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDW,KAAK,CAAC,2BAA2B,CAAC;IACtC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAIC,UAAU,IAAK;IACrCpB,cAAc,CAACoB,UAAU,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,oBACI1B,OAAA;IAAK2B,SAAS,EAAC,kEAAkE;IAAAC,QAAA,gBAC7E5B,OAAA;MAAI2B,SAAS,EAAC,qCAAqC;MAAAC,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9DhC,OAAA;MAAK2B,SAAS,EAAC,qBAAqB;MAAAC,QAAA,eAC5B5B,OAAA;QACIiC,OAAO,EAAEA,CAAA,KAAMzB,QAAQ,CAAC,SAAS,CAAE;QACnCmB,SAAS,EAAC,mHAAmH;QAAAC,QAAA,EAChI;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACNhC,OAAA;MAAK2B,SAAS,EAAC,2BAA2B;MAACO,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAyB,CAAE;MAAAP,QAAA,eAEtF5B,OAAA,CAACH,UAAU;QAACuC,UAAU,EAAErB,iBAAkB;QAACE,cAAc,EAAEA;MAAe;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC,eACNhC,OAAA,CAACF,UAAU;MACPuC,UAAU,EAAElC,SAAS,CAACmC,MAAO;MAC7B/B,YAAY,EAAEA,YAAa;MAC3BF,WAAW,EAAEA,WAAY;MACzBkC,YAAY,EAAEd;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAC9B,EAAA,CA/DuBD,SAAS;EAAA,QAIZN,WAAW;AAAA;AAAA6C,EAAA,GAJRvC,SAAS;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}