{"ast":null,"code":"var _jsxFileName = \"C:\\\\LEECHANGSU_MAIN\\\\mini_project\\\\frontend\\\\src\\\\components\\\\map\\\\MapMain.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MapComponent from './MapComponent';\nimport MarkerComponent from './MarkerComponent';\nimport SearchComponent from './SearchComponent';\nimport LineComponent from './LineComponent';\nimport InfoPanel from '../info/InfoPanel'; // InfoPanel 컴포넌트 추가\nimport axios from '../../axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapMain = () => {\n  _s();\n  const [map, setMap] = useState(null); // 네이버 지도 객체를 관리하는 상태\n  const [filteredMarkerData, setFilteredMarkerData] = useState([]); // 필터링된 마커 데이터를 저장하는 상태\n  const [filteredLineData, setFilteredLineData] = useState([]); // 필터링된 라인 데이터를 저장하는 상태\n  const {\n    naver\n  } = window; // naver 객체를 window에서 가져옴 (네이버 지도 API 사용)\n\n  // 지도 로드 완료 시 호출되는 함수\n  const handleMapLoad = mapInstance => {\n    setMap(mapInstance); // 지도 객체를 상태로 저장\n  };\n\n  // 선택된 카테고리 및 구/군에 따라 데이터를 가져오는 함수 (2024-08-12 15:10)\n  const fetchMarkerData = async (category, district) => {\n    const districtCodes = {\n      '중구': 2611,\n      '서구': 2614,\n      '동구': 2617,\n      '영도구': 2620,\n      '부산진구': 2623,\n      '동래구': 2626,\n      '남구': 2629,\n      '북구': 2632,\n      '해운대구': 2635,\n      '사하구': 2638,\n      '금정구': 2641,\n      '강서구': 2644,\n      '연제구': 2647,\n      '수영구': 2650,\n      '사상구': 2653,\n      '기장군': 2671\n    };\n    try {\n      // 카테고리별 기본 URL 설정\n      let baseUrl = '';\n      if (category === '식당') {\n        baseUrl = '/restaurant';\n      } else if (category === '명소') {\n        baseUrl = '/sight';\n      } else if (category === '자전거 도로') {\n        baseUrl = '/road';\n      }\n\n      // 지역에 따라 URL 결정\n      const url = district !== '부산' ? `${baseUrl}/city/${districtCodes[district]}` : baseUrl;\n      const response = await axios.get(url); // 서버에서 데이터 가져오기\n      return response.data; // 데이터를 반환\n    } catch (error) {\n      console.error('Error fetching marker data:', error); // 데이터 로드 중 오류 발생 시 로그 출력\n      return [];\n    }\n  };\n\n  // 검색 시 호출되는 함수 (구/군과 카테고리를 받아 필터링 수행)\n  const handleSearch = async (district, category) => {\n    const data = await fetchMarkerData(category, district); // 선택된 카테고리 및 구/군에 따라 데이터를 가져옴\n\n    if (category === '자전거 도로') {\n      setFilteredLineData(data); // 필터링된 라인 데이터를 상태에 저장\n    } else {\n      setFilteredMarkerData(data); // 필터링된 데이터를 상태에 저장\n    }\n    if (map) {\n      if (filteredMarkerData.length > 0) {\n        // 필터링된 데이터가 존재할 경우\n        const bounds = new naver.maps.LatLngBounds(); // 지도에 표시할 범위를 계산하기 위한 객체\n        filteredMarkerData.forEach(location => {\n          const pointMatch = location.point.match(/POINT \\(([^ ]+) ([^ ]+)\\)/); // 좌표를 파싱\n          if (pointMatch) {\n            const lng = parseFloat(pointMatch[1]); // 경도 추출\n            const lat = parseFloat(pointMatch[2]); // 위도 추출\n            bounds.extend(new naver.maps.LatLng(lat, lng)); // 좌표를 범위에 추가\n          }\n        });\n        map.fitBounds(bounds); // 모든 마커가 보이도록 지도 범위 설정\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 relative\",\n      children: [/*#__PURE__*/_jsxDEV(SearchComponent, {\n        onSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapComponent, {\n        onMapLoad: handleMapLoad,\n        center: {\n          lat: 35.1796,\n          lng: 129.0756\n        },\n        zoomLevel: 11\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), map && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [filteredLineData.length > 0 && /*#__PURE__*/_jsxDEV(LineComponent, {\n          map: map,\n          lineData: filteredLineData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 45\n        }, this), \" \", filteredMarkerData.length > 0 && /*#__PURE__*/_jsxDEV(MarkerComponent, {\n          map: map,\n          markerData: filteredMarkerData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      markerData: filteredMarkerData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(MapMain, \"PkneY0TI2dG+YjnzMeykaTucm7k=\");\n_c = MapMain;\nexport default MapMain;\nvar _c;\n$RefreshReg$(_c, \"MapMain\");","map":{"version":3,"names":["React","useState","MapComponent","MarkerComponent","SearchComponent","LineComponent","InfoPanel","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","MapMain","_s","map","setMap","filteredMarkerData","setFilteredMarkerData","filteredLineData","setFilteredLineData","naver","window","handleMapLoad","mapInstance","fetchMarkerData","category","district","districtCodes","baseUrl","url","response","get","data","error","console","handleSearch","length","bounds","maps","LatLngBounds","forEach","location","pointMatch","point","match","lng","parseFloat","lat","extend","LatLng","fitBounds","className","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","onMapLoad","center","zoomLevel","lineData","markerData","_c","$RefreshReg$"],"sources":["C:/LEECHANGSU_MAIN/mini_project/frontend/src/components/map/MapMain.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport MapComponent from './MapComponent';\r\nimport MarkerComponent from './MarkerComponent';\r\nimport SearchComponent from './SearchComponent';\r\nimport LineComponent from './LineComponent';\r\nimport InfoPanel from '../info/InfoPanel';  // InfoPanel 컴포넌트 추가\r\nimport axios from '../../axios';\r\n\r\nconst MapMain = () => {\r\n  const [map, setMap] = useState(null); // 네이버 지도 객체를 관리하는 상태\r\n  const [filteredMarkerData, setFilteredMarkerData] = useState([]); // 필터링된 마커 데이터를 저장하는 상태\r\n  const [filteredLineData, setFilteredLineData] = useState([]); // 필터링된 라인 데이터를 저장하는 상태\r\n  const { naver } = window; // naver 객체를 window에서 가져옴 (네이버 지도 API 사용)\r\n  \r\n  \r\n\r\n  // 지도 로드 완료 시 호출되는 함수\r\n  const handleMapLoad = (mapInstance) => {\r\n    setMap(mapInstance); // 지도 객체를 상태로 저장\r\n  };\r\n\r\n  // 선택된 카테고리 및 구/군에 따라 데이터를 가져오는 함수 (2024-08-12 15:10)\r\n  const fetchMarkerData = async (category, district) => {\r\n    const districtCodes = {\r\n      '중구': 2611, '서구': 2614, '동구': 2617, '영도구': 2620, '부산진구': 2623, '동래구': 2626,\r\n      '남구': 2629, '북구': 2632, '해운대구': 2635, '사하구': 2638, '금정구': 2641, '강서구': 2644,\r\n      '연제구': 2647, '수영구': 2650, '사상구': 2653, '기장군': 2671\r\n    };\r\n\r\n    try {\r\n      // 카테고리별 기본 URL 설정\r\n      let baseUrl = '';\r\n      if (category === '식당') {\r\n        baseUrl = '/restaurant';\r\n      } else if (category === '명소') {\r\n        baseUrl = '/sight';\r\n      } else if (category === '자전거 도로') {\r\n        baseUrl = '/road';\r\n      }\r\n\r\n      // 지역에 따라 URL 결정\r\n      const url = district !== '부산' ? `${baseUrl}/city/${districtCodes[district]}` : baseUrl;\r\n\r\n      const response = await axios.get(url); // 서버에서 데이터 가져오기\r\n      return response.data; // 데이터를 반환\r\n    } catch (error) {\r\n      console.error('Error fetching marker data:', error); // 데이터 로드 중 오류 발생 시 로그 출력\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // 검색 시 호출되는 함수 (구/군과 카테고리를 받아 필터링 수행)\r\n  const handleSearch = async (district, category) => {\r\n    const data = await fetchMarkerData(category, district); // 선택된 카테고리 및 구/군에 따라 데이터를 가져옴\r\n\r\n    if (category === '자전거 도로') {\r\n      setFilteredLineData(data); // 필터링된 라인 데이터를 상태에 저장\r\n    } else {\r\n      setFilteredMarkerData(data); // 필터링된 데이터를 상태에 저장\r\n    }\r\n\r\n    if(map){\r\n      if (filteredMarkerData.length > 0) { // 필터링된 데이터가 존재할 경우\r\n        const bounds = new naver.maps.LatLngBounds(); // 지도에 표시할 범위를 계산하기 위한 객체\r\n        filteredMarkerData.forEach(location => {\r\n          const pointMatch = location.point.match(/POINT \\(([^ ]+) ([^ ]+)\\)/); // 좌표를 파싱\r\n          if (pointMatch) {\r\n            const lng = parseFloat(pointMatch[1]); // 경도 추출\r\n            const lat = parseFloat(pointMatch[2]); // 위도 추출\r\n            bounds.extend(new naver.maps.LatLng(lat, lng)); // 좌표를 범위에 추가\r\n          }\r\n        });\r\n        map.fitBounds(bounds); // 모든 마커가 보이도록 지도 범위 설정\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen\">\r\n      <div className=\"flex-1 relative\">\r\n        <SearchComponent onSearch={handleSearch} />\r\n        <MapComponent onMapLoad={handleMapLoad} center={{ lat: 35.1796, lng: 129.0756 }} zoomLevel={11} />\r\n        {map && (\r\n          <>\r\n            {filteredLineData.length > 0 && <LineComponent map={map} lineData={filteredLineData} />} {/* 필터링된 라인 데이터 전달 */}\r\n            {filteredMarkerData.length > 0 && <MarkerComponent map={map} markerData={filteredMarkerData} />}\r\n          </>\r\n        )}\r\n      </div>\r\n      <InfoPanel markerData={filteredMarkerData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapMain;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}